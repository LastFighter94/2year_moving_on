https://www.youtube.com/watch?v=acAH2_YT6bs

In project directory
npm init -y

1 --------

https://webpack.js.org/guides/getting-started/
Накатываем webpack и web pack cli
npm install webpack webpack-cli --save-dev

npm i -D webpack@5.88.2

Конкретные версии для курса
npm i -D webpack-cli@5.1.4 webpack-dev-server@4.15.1

Меняем build скрипт в package - на webpack

ТО ЧТО ПОЛУЧАЕТСЯ В РЕЗУЛЬТАТЕ СБОРКИ - И НАЗЫВЕТСЯ БАНДЛ

2 --------

Create webpack.config.js в корне нашего проекта

После 15:36 npm run build:dev

3 --------

npm i -D html-webpack-plugin@5.5.3

4 --------

npm i -D ts-loader@9.5.0 typescript@5.2.2

5 --------

Чтобы config webpack был написан на TS - устанавливаем зависимости ниже

npm i -D @types/node@20.8.3 @types/webpack@5.28.3 ts-node@10.9.1
npm i -D @types/webpack-dev-server

После этого impors через require - мы можем заменить на обычные импорты

6 --------

Development server

Уже установлен 

************ - запуск с определенным портом из консоли (после первых -- идут какие-то флажки)

npm run start -- --env port=5000



############################
############################
КОНКРЕТНЫЕ ПРИМЕРЫ, КОНКРЕТНЫЕ РЕАЛИЗАЦИИ

npm i react@18.2.0 react-dom@18.2.0
npm i -D @types/react@18.2.25 @types/react-dom@18.2.11 





@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Эксперимент 

npm i vue
npm install -D vue-loader vue-template-compiler
npm i -D @types/vue
npm i babel-loader
npm i -D vue-style-loader css-loader




############################
Далее по программе ролика 49:27

npm i -D style-loader@3.3.3 
npm i -D sass@1.69.0 sass-loader@13.3.2

npm install --save-dev mini-css-extract-plugin

############################
Как сделать инкапсулированные модули стилей как в react - только в typeScript при этом
1:14:40

declare module "*.module.css";
declare module "*.module.scss";

Npm I typescript-plugin-css-modules

In tsconfig

  "compilerOptions": {
    "plugins": [{ "name": "typescript-plugin-css-modules" }]
  }

То что предлагается в видео не работает

1:20

npm i react-router-dom@6.16.0

1:31

npm i -D webpack-bundle-analyzer@4.9.1 @types/webpack-bundle-analyzer

////

npm run start -- --env port=5000 analyser=true

////

npm i @svgr/webpack@8.1.0

////

2:02:50 - 
Выносим проверку типов в отдельный процесс 
Сборка замедляться не будет, но при этом отдельно в real-time процессе типы будут проверяться

npm i -D fork-ts-checker-webpack-plugin@9.0.0

////
2:07:10
HMR - hot module replacement
По классике в devServer в обыкновенном чистом JS на webpack сборке - 
Можно было бы просто проставить true,
Но в примере с react - делаем чуть больше действий

Тз документации webpack по HMR переходим в ReactHotLoader,
В той доке написано что вскоре он будет заменен на другую любу - 
Идет по ссылке на эту либу

npm i -D @pmmmwh/react-refresh-webpack-plugin@0.5.11 - накатываем ее
Потом накатываем то что поможет использовать этот плагин с нашим ts-loader

npm i -D react-refresh-typescript@2.0.9

////
2:13:20

npm i -D copy-webpack-plugin@11.0.0

////
2:16:50

npm i -D @babel/core@7.23.2 babel-loader@9.1.3

////
2:18:37

npm i -D @babel/preset-typescript@7.23.2
npm i -D @babel/preset-react@7.22.15

2 23
